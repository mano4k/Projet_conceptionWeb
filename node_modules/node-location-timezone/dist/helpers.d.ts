/**
 * @func exists Whether the specified value is not null, undefined or NaN.
 *
 * @param  {any} thing
 * @return {boolean}
 */
export declare const exists: (thing: any) => boolean;
/**
 * @func is Whether the specified value is from the specified type regarding its whole prototype.
 *
 * @param  {function} Type Type function
 * @param  {any} thing
 * @return {boolean}
 */
export declare const is: (Type: Function, thing: any) => boolean;
/**
 * @func hasLen Whether a string has a specific length (without using length property).
 *
 * @param  {string}  str
 * @param  {number}  from Minimum 1
 * @param  {number}  to   Minimum 1
 * @return {boolean}
 */
export declare const hasLen: ({ str, from, to }: {
    str: string;
    from: number;
    to: number;
}) => boolean;
/**
 * @func match Whether the compare string matches the source string.
 *
 * @param  {string}  source  Source string
 * @param  {string}  compare Compared string
 * @param  {boolean} partial Whether to partially compare strings
 * @param  {boolean} strict  Whether to strictly compare strings
 * @return {boolean}
 */
export declare const match: ({ source, compare, partial, strict, }: {
    source: string;
    compare: string;
    partial?: boolean;
    strict?: boolean;
}) => boolean;
/**
 * @func isValidCountryIso Whether the country ISO code is a valid ISO 3166-1
 * alpha-2 or alpha-3 code.
 *
 * @param  {string}  code  ISO code (case sensitive)
 * @return {object}
 */
export declare const isValidCountryIso: (code: string) => {
    valid: boolean;
    iso2: boolean;
    iso3: boolean;
};
