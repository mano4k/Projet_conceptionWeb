"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidCountryIso = exports.getCountryIso3Codes = exports.getCountryIso3CodeByIso2 = exports.getCountryIso2Codes = exports.getCountryIso2CodeByIso3 = exports.getCountries = exports.getCapitals = exports.findCountryByName = exports.findCountryByIso = exports.findCountryByCapitalName = exports.findCapitalOfCountryName = exports.findCapitalOfCountryIso = void 0;
const data_1 = require("./data");
const helpers_1 = require("./helpers");
Object.defineProperty(exports, "isValidCountryIso", { enumerable: true, get: function () { return helpers_1.isValidCountryIso; } });
/**
 * @func findCapitalOfCountryIso Find the capital of a country by its
 * country ISO 3166-1 alpha-2 or alpha-3 code.
 *
 * @param  {string}  code  Country ISO code (case insensitive)
 * @return {Capital|undefined}
 */
const findCapitalOfCountryIso = function findCapitalOfCountryIso(code) {
    if (!(0, helpers_1.is)(String, code)) {
        return undefined;
    }
    const countryCode = code.toUpperCase();
    const { valid, iso2 } = (0, helpers_1.isValidCountryIso)(countryCode);
    if (!valid) {
        return undefined;
    }
    const alphaType = iso2 ? 'iso2' : 'iso3';
    return data_1.countryCapitals.find((capital) => (0, helpers_1.match)({
        source: capital.country[alphaType],
        compare: code,
        partial: false,
        strict: false,
    }));
};
exports.findCapitalOfCountryIso = findCapitalOfCountryIso;
/**
 * @func findCapitalOfCountryName Find the capital of a country by its name.
 *
 * @param  {string}  name  Country name (case insensitive)
 * @return {Capital|undefined}
 */
const findCapitalOfCountryName = function findCapitalOfCountryName(name) {
    if (!(0, helpers_1.is)(String, name)) {
        return undefined;
    }
    return data_1.countryCapitals.find((capital) => (0, helpers_1.match)({
        source: capital.country.name,
        compare: name,
        partial: false,
        strict: false,
    }) || (0, helpers_1.match)({
        source: capital.country.officialName,
        compare: name,
        partial: false,
        strict: false,
    }));
};
exports.findCapitalOfCountryName = findCapitalOfCountryName;
/**
 * @func findCountryByCapitalName Find a country by its capital name.
 *
 * @param  {string}  name  Capital name (case insensitive, utf-8 or ascii)
 * @return {Country|undefined}
 */
const findCountryByCapitalName = function findCountryByCapitalName(name) {
    if (!(0, helpers_1.is)(String, name) || name.trim() === '') {
        return undefined;
    }
    return data_1.countries.find((country) => (0, helpers_1.match)({
        source: country.capital.name,
        compare: name,
        partial: false,
        strict: false,
    }) || (0, helpers_1.match)({
        source: country.capital.nameAscii,
        compare: name,
        partial: false,
        strict: false,
    }));
};
exports.findCountryByCapitalName = findCountryByCapitalName;
/**
 * @func findCountryByIso Find a country by its country ISO 3166-1 alpha-2 or alpha-3 code.
 *
 * @param  {string}  code  Country ISO code (case insensitive)
 * @return {Country|undefined}
 */
const findCountryByIso = function findCountryByIso(code) {
    if (!(0, helpers_1.is)(String, code)) {
        return undefined;
    }
    const countryCode = code.toUpperCase();
    const { valid, iso2 } = (0, helpers_1.isValidCountryIso)(countryCode);
    if (!valid) {
        return undefined;
    }
    const alphaType = iso2 ? 'iso2' : 'iso3';
    return data_1.countries.find((country) => (0, helpers_1.match)({
        source: country[alphaType],
        compare: code,
        partial: false,
        strict: false,
    }));
};
exports.findCountryByIso = findCountryByIso;
/**
 * @func findCountryByName Find a country by its name.
 *
 * @param  {string}  name  Country name (case insensitive)
 * @return {Country|undefined}
 */
const findCountryByName = function findCountryByName(name) {
    if (!(0, helpers_1.is)(String, name)) {
        return undefined;
    }
    return data_1.countries.find((country) => (0, helpers_1.match)({
        source: country.name,
        compare: name,
        partial: false,
        strict: false,
    }) || (0, helpers_1.match)({
        source: country.officialName,
        compare: name,
        partial: false,
        strict: false,
    }));
};
exports.findCountryByName = findCountryByName;
/**
 * @func getCapitals Get all country capitals.
 *
 * @return  {Capital[]}
 */
const getCapitals = function getCapitals() {
    return data_1.countryCapitals;
};
exports.getCapitals = getCapitals;
/**
 * @func getCountries Get all countries.
 *
 * @return  {Country[]}
 */
const getCountries = function getCountries() {
    return data_1.countries;
};
exports.getCountries = getCountries;
/**
 * @func getCountryIso2CodeByIso3 Get the country ISO 3166-1 alpha-2 code
 * related to an alpha-3 code.
 *
 * @param  {string}  iso3  Country ISO 3166-1 alpha-3 code (case insensitive)
 * @return {string|undefined}
 */
const getCountryIso2CodeByIso3 = function getCountryIso2CodeByIso3(iso3) {
    if (!(0, helpers_1.is)(String, iso3)) {
        return undefined;
    }
    return data_1.countryIso2ByIso3Codes[iso3.toUpperCase()];
};
exports.getCountryIso2CodeByIso3 = getCountryIso2CodeByIso3;
/**
 * @func getCountryIso2Codes Get all country ISO 3166-1 alpha-2 codes.
 *
 * @return  {string[]}
 */
const getCountryIso2Codes = function getCountryIso2Codes() {
    return data_1.countryIso2Codes;
};
exports.getCountryIso2Codes = getCountryIso2Codes;
/**
 * @func getCountryIso3CodeByIso2 Get the country ISO 3166-1 alpha-2 code
 * related to an alpha-3 code.
 *
 * @param  {string}  iso2  Country ISO 3166-1 alpha-2 code (case insensitive)
 * @return {string|undefined}
 */
const getCountryIso3CodeByIso2 = function getCountryIso3CodeByIso2(iso2) {
    if (!(0, helpers_1.is)(String, iso2)) {
        return undefined;
    }
    return data_1.countryIso3ByIso2Codes[iso2.toUpperCase()];
};
exports.getCountryIso3CodeByIso2 = getCountryIso3CodeByIso2;
/**
 * @func getCountryIso3Codes Get all country ISO 3166-1 alpha-3 codes.
 *
 * @return  {string[]}
 */
const getCountryIso3Codes = function getCountryIso3Codes() {
    return data_1.countryIso3Codes;
};
exports.getCountryIso3Codes = getCountryIso3Codes;
