"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatesAnsi = exports.findStateAnsiByUspsCode = exports.findStateAnsiByName = exports.findStateAnsiByGnisid = exports.findStateAnsiByFipsCode = void 0;
const data_1 = require("./data");
const helpers_1 = require("./helpers");
/**
 * @func findStateAnsiByFipsCode Find the state's information based on the
 * Federal Information Processing Standard (FIPS) State Code ANSI
 * (American National Standards Institute, USA states only).
 *
 * @param  {string}  code  FIPS ANSI code (case insensitive, 2 chars)
 * @return {StateAnsi|undefined}
 */
const findStateAnsiByFipsCode = function findStateAnsiByFipsCode(code) {
    if (!(0, helpers_1.hasLen)({ str: code, from: 2, to: 2 })) {
        return undefined;
    }
    return data_1.statesAnsi.find((state) => (0, helpers_1.match)({
        source: state.fipsCode,
        compare: code,
        partial: false,
        strict: false,
    }));
};
exports.findStateAnsiByFipsCode = findStateAnsiByFipsCode;
/**
 * @func findStateAnsiByGnisid Find the state's information based on the
 * Geographic Names Information System Identifier (GNISID) ANSI
 * (American National Standards Institute, USA states only).
 *
 * @param  {string}  id  GNISID ANSI (case insensitive)
 * @return {StateAnsi|undefined}
 */
const findStateAnsiByGnisid = function findStateAnsiByGnisid(id) {
    if (!(0, helpers_1.is)(String, id)) {
        return undefined;
    }
    return data_1.statesAnsi.find((state) => (0, helpers_1.match)({
        source: state.gnisid,
        compare: id,
        partial: false,
        strict: false,
    }));
};
exports.findStateAnsiByGnisid = findStateAnsiByGnisid;
/**
 * @func findStateAnsiByName Find the state's information by its name ANSI
 * (American National Standards Institute, USA states only).
 *
 * @param  {string}  name  Name ANSI (case insensitive)
 * @return {StateAnsi|undefined}
 */
const findStateAnsiByName = function findStateAnsiByName(name) {
    if (!(0, helpers_1.is)(String, name)) {
        return undefined;
    }
    return data_1.statesAnsi.find((state) => (0, helpers_1.match)({
        source: state.name,
        compare: name,
        partial: false,
        strict: false,
    }));
};
exports.findStateAnsiByName = findStateAnsiByName;
/**
 * @func findStateAnsiByUspsCode Find the state's information based on the
 * Official United States Postal Service (USPS) Code ANSI
 * (American National Standards Institute, USA states only).
 *
 * @param  {string}  code  USPS ANSI code (case insensitive, 2 chars)
 * @return {StateAnsi|undefined}
 */
const findStateAnsiByUspsCode = function findStateAnsiByUspsCode(code) {
    if (!(0, helpers_1.hasLen)({ str: code, from: 2, to: 2 })) {
        return undefined;
    }
    return data_1.statesAnsi.find((state) => (0, helpers_1.match)({
        source: state.uspsCode,
        compare: code,
        partial: false,
        strict: false,
    }));
};
exports.findStateAnsiByUspsCode = findStateAnsiByUspsCode;
/**
 * @func getStatesAnsi Get all states ANSI (American National Standards Institute, USA states only).
 *
 * @return  {StateAnsi[]}
 */
const getStatesAnsi = function getStatesAnsi() {
    return data_1.statesAnsi;
};
exports.getStatesAnsi = getStatesAnsi;
