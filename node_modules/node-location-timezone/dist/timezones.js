"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimezones = exports.findTimezonesByCountryName = exports.findTimezonesByCountryIso = exports.findTimezoneByCityName = exports.findTimezoneByCapitalOfCountryName = exports.findTimezoneByCapitalOfCountryIso = void 0;
const data_1 = require("./data");
const helpers_1 = require("./helpers");
/**
 * @func findTimezoneByCapitalOfCountryIso Find a timezone based on the capital
 * of a country ISO 3166-1 alpha-2 or alpha-3 code.
 *
 * @param   {string}  code  Country ISO code (case insensitive)
 * @return  {string|undefined}
 */
const findTimezoneByCapitalOfCountryIso = function findTimezoneByCapitalOfCountryIso(code) {
    var _a;
    if (!(0, helpers_1.is)(String, code)) {
        return undefined;
    }
    const countryCode = code.toUpperCase();
    const { valid, iso2 } = (0, helpers_1.isValidCountryIso)(countryCode);
    if (!valid) {
        return undefined;
    }
    const alphaType = iso2 ? 'iso2' : 'iso3';
    return (_a = data_1.countryCapitals.find((capital) => (0, helpers_1.match)({
        source: capital.country[alphaType],
        compare: countryCode,
        partial: false,
        strict: true,
    }))) === null || _a === void 0 ? void 0 : _a.timezone;
};
exports.findTimezoneByCapitalOfCountryIso = findTimezoneByCapitalOfCountryIso;
/**
 * @func findTimezoneByCapitalOfCountryName Find a timezone based on the capital
 * of a country (name).
 *
 * @param   {string}  name  Country name (case insensitive)
 * @return  {string|undefined}
 */
const findTimezoneByCapitalOfCountryName = function findTimezoneByCapitalOfCountryName(name) {
    var _a;
    if (!(0, helpers_1.is)(String, name)) {
        return undefined;
    }
    return (_a = data_1.countryCapitals.find((capital) => (0, helpers_1.match)({
        source: capital.country.name,
        compare: name,
        partial: false,
        strict: false,
    }) || (0, helpers_1.match)({
        source: capital.country.officialName,
        compare: name,
        partial: false,
        strict: false,
    }))) === null || _a === void 0 ? void 0 : _a.timezone;
};
exports.findTimezoneByCapitalOfCountryName = findTimezoneByCapitalOfCountryName;
/**
 * @func findTimezoneByCityName Find a timezone based on a city name.
 *
 * @param   {string}  name  City name (case insensitive, utf-8 or ascii)
 * @return  {string|undefined}
 */
const findTimezoneByCityName = function findTimezoneByCityName(name) {
    var _a;
    if (!(0, helpers_1.is)(String, name) || name.trim() === '') {
        return undefined;
    }
    return (_a = data_1.locations.find((location) => (0, helpers_1.match)({
        source: location.city,
        compare: name,
        partial: false,
        strict: false,
    }) || (0, helpers_1.match)({
        source: location.cityAscii,
        compare: name,
        partial: false,
        strict: false,
    }))) === null || _a === void 0 ? void 0 : _a.timezone;
};
exports.findTimezoneByCityName = findTimezoneByCityName;
/**
 * @func findTimezonesByCountryIso Find timezones based on a country
 * ISO 3166-1 alpha-2 or alpha-3 code.
 *
 * @param   {string}  code  Country ISO code (case insensitive)
 * @return  {string[]}
 */
const findTimezonesByCountryIso = function findTimezonesByCountryIso(code) {
    if (!(0, helpers_1.is)(String, code)) {
        return [];
    }
    const countryCode = code.toUpperCase();
    const { valid, iso2 } = (0, helpers_1.isValidCountryIso)(countryCode);
    if (!valid) {
        return [];
    }
    const alphaType = iso2 ? 'iso2' : 'iso3';
    const country = data_1.countries.find((c) => (0, helpers_1.match)({
        source: c[alphaType],
        compare: code,
        partial: false,
        strict: false,
    }));
    if (!(0, helpers_1.exists)(country)) {
        return [];
    }
    return country.timezones;
};
exports.findTimezonesByCountryIso = findTimezonesByCountryIso;
/**
 * @func findTimezonesByCountryName Find timezones based on a country name.
 *
 * @param   {string}  name  Country name (case insensitive)
 * @return  {string[]}
 */
const findTimezonesByCountryName = function findTimezonesByCountryName(name) {
    if (!(0, helpers_1.is)(String, name)) {
        return [];
    }
    const country = data_1.countries.find((c) => (0, helpers_1.match)({
        source: c.name,
        compare: name,
        partial: false,
        strict: false,
    }) || (0, helpers_1.match)({
        source: c.officialName,
        compare: name,
        partial: false,
        strict: false,
    }));
    if (!(0, helpers_1.exists)(country)) {
        return [];
    }
    return country.timezones;
};
exports.findTimezonesByCountryName = findTimezonesByCountryName;
/**
 * @func getTimezones Get all timezones.
 *
 * @return  {string[]}
 */
const getTimezones = function getTimezones() {
    return data_1.timezones;
};
exports.getTimezones = getTimezones;
