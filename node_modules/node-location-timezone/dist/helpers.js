"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidCountryIso = exports.match = exports.hasLen = exports.is = exports.exists = void 0;
const data_1 = require("./data");
/**
 * @func exists Whether the specified value is not null, undefined or NaN.
 *
 * @param  {any} thing
 * @return {boolean}
 */
const exists = function exists(thing) {
    return !(thing === undefined || thing === null || Number.isNaN(thing));
};
exports.exists = exists;
/**
 * @func is Whether the specified value is from the specified type regarding its whole prototype.
 *
 * @param  {function} Type Type function
 * @param  {any} thing
 * @return {boolean}
 */
const is = function is(Type, thing) {
    return (0, exports.exists)(Type)
        && (0, exports.exists)(thing)
        && (thing.constructor === Type
            || thing instanceof Type);
};
exports.is = is;
/**
 * @func hasLen Whether a string has a specific length (without using length property).
 *
 * @param  {string}  str
 * @param  {number}  from Minimum 1
 * @param  {number}  to   Minimum 1
 * @return {boolean}
 */
const hasLen = function hasLen({ str, from, to }) {
    if (!(0, exports.is)(String, str)) {
        return false;
    }
    const fromValue = from >= 1 ? from : 1;
    const toValue = to >= 1 && to >= fromValue ? to : fromValue;
    if (fromValue === toValue) {
        return str.charAt(fromValue - 1) !== '';
    }
    return str.charAt(fromValue - 1) !== '' || str.charAt(toValue - 1) !== '';
};
exports.hasLen = hasLen;
/**
 * @func match Whether the compare string matches the source string.
 *
 * @param  {string}  source  Source string
 * @param  {string}  compare Compared string
 * @param  {boolean} partial Whether to partially compare strings
 * @param  {boolean} strict  Whether to strictly compare strings
 * @return {boolean}
 */
const match = function match({ source, compare, partial = false, strict = false, }) {
    if (!(0, exports.is)(String, source) || !(0, exports.is)(String, compare)) {
        return false;
    }
    if (partial === true) {
        return source.toLowerCase().includes(compare.toLowerCase());
    }
    if (strict === true) {
        return source === compare;
    }
    return source.toLowerCase() === compare.toLowerCase();
};
exports.match = match;
/**
 * @func isValidCountryIso Whether the country ISO code is a valid ISO 3166-1
 * alpha-2 or alpha-3 code.
 *
 * @param  {string}  code  ISO code (case sensitive)
 * @return {object}
 */
const isValidCountryIso = function isValidCountryIso(code) {
    const res = {
        valid: false,
        iso2: false,
        iso3: false,
    };
    if (!(0, exports.hasLen)({ str: code, from: 2, to: 3 })) {
        return res;
    }
    if (data_1.countryIso2Codes.includes(code)) {
        res.valid = true;
        res.iso2 = true;
        return res;
    }
    if (data_1.countryIso3Codes.includes(code)) {
        res.valid = true;
        res.iso3 = true;
        return res;
    }
    return res;
};
exports.isValidCountryIso = isValidCountryIso;
