declare const _default: {
    findTimezoneByCapitalOfCountryIso: (code: string) => string;
    findTimezoneByCapitalOfCountryName: (name: string) => string;
    findTimezoneByCityName: (name: string) => string;
    findTimezonesByCountryIso: (code: string) => string[];
    findTimezonesByCountryName: (name: string) => string[];
    getTimezones: () => string[];
    findStateAnsiByFipsCode: (code: string) => import("./interfaces").StateAnsi;
    findStateAnsiByGnisid: (id: string) => import("./interfaces").StateAnsi;
    findStateAnsiByName: (name: string) => import("./interfaces").StateAnsi;
    findStateAnsiByUspsCode: (code: string) => import("./interfaces").StateAnsi;
    getStatesAnsi: () => import("./interfaces").StateAnsi[];
    findLocationsByCoordinates: ({ latitudeFrom, latitudeTo, longitudeFrom, longitudeTo, }: {
        latitudeFrom?: number;
        latitudeTo?: number;
        longitudeFrom?: number;
        longitudeTo?: number;
    }) => import("./interfaces").Location[];
    findLocationsByCountryIso: (code: string) => import("./interfaces").Location[];
    findLocationsByCountryName: (name: string, partialMatch?: boolean) => import("./interfaces").Location[];
    findLocationsByProvince: (name: string, partialMatch?: boolean) => import("./interfaces").Location[];
    findLocationsByState: (name: string, partialMatch?: boolean) => import("./interfaces").Location[];
    getLocations: () => import("./interfaces").Location[];
    findCapitalOfCountryIso: (code: string) => import("./interfaces").Capital;
    findCapitalOfCountryName: (name: string) => import("./interfaces").Capital;
    findCountryByCapitalName: (name: string) => import("./interfaces").Country;
    findCountryByIso: (code: string) => import("./interfaces").Country;
    findCountryByName: (name: string) => import("./interfaces").Country;
    getCapitals: () => import("./interfaces").Capital[];
    getCountries: () => import("./interfaces").Country[];
    getCountryIso2CodeByIso3: (iso3: string) => string;
    getCountryIso2Codes: () => string[];
    getCountryIso3CodeByIso2: (iso2: string) => string;
    getCountryIso3Codes: () => string[];
    isValidCountryIso: (code: string) => {
        valid: boolean;
        iso2: boolean;
        iso3: boolean;
    };
};
export = _default;
